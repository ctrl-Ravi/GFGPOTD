Given a string str consisting of opening and closing parenthesis '(' and ')'. Find length of the longest valid parenthesis substring.

A parenthesis string is valid if:
For every opening parenthesis, there is a closing parenthesis.
Opening parenthesis must be closed in the correct order.
Examples :
Input: str = ((()
Output: 2
Explaination: The longest valid parenthesis substring is "()".
Input: str = )()())
Output: 4
Explaination: The longest valid parenthesis substring is "()()".
Expected Time Complexity: O(|str|)
Expected Auxiliary Space: O(|str|)

Solution:
class Solution {
  public:
    int maxLength(string& str) {
        stack<int> s;
        s.push(-1); 
        int maxLength = 0;

        for (int i = 0; i < str.length(); ++i) {
            if (str[i] == '(') {
                s.push(i);  
            } else {
                s.pop();  

                if (!s.empty()) {
                  
                    maxLength = max(maxLength, i - s.top());
                } else {
              
                    s.push(i);
                }
            }
        }

        return maxLength;
        
      
    }
};
