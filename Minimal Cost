Difficulty: MediumAccuracy: 51.08%Submissions: 65K+Points: 4
There is an array arr of heights of stone and Geek is standing at the first stone and can jump to one of the following: Stone i+1, i+2, ... i+k stone, where k is the maximum number of steps that can be jumped and cost will be |hi-hj| is incurred, where j is the stone to land on. Find the minimum possible total cost incurred before the Geek reaches the last stone.

Example:

Input: k = 3, arr[]= [10, 30, 40, 50, 20]
Output: 30
Explanation: Geek will follow the path 1->2->5, the total cost would be | 10-30| + |30-20| = 30, which is minimum
Input: k = 1, arr[]= [10, 20, 10]
Output: 20
Explanation: Geek will follow the path 1->2->3, the total cost would be |10 - 20| + |20 - 10| = 20.
Expected Time Complexity: O(n*k)
Expected Auxilary Space: O(n)

Solution:
class Solution {
public:
    int minimizeCost(int k, vector<int>& arr) {
        int n = arr.size();
        vector<int> dp(n, INT_MAX);  // DP array to store minimum cost to reach each stone
        dp[0] = 0;  // No cost to stay on the first stone

        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= k && i + j < n; j++) {
                dp[i + j] = min(dp[i + j], dp[i] + abs(arr[i] - arr[i + j]));
            }
        }

        return dp[n - 1];  // The last stone's minimum cost
    }
};
