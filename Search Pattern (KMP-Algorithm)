//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    void computeLPS(string &pat, vector<int> &LPS,int M){
        int len =0;
        LPS[0]=0;
        
        int i= 1;
        while(i<M){
            if(pat[i]==pat[len]){
                len++;
                LPS[i]=len;
                i++;
            }else{
                if(len!=0){
                    len=LPS[len-1];
                }else{
                    LPS[i]=0;
                    i++;
                }
            }
        }
    }
    vector<int> search(string& pat, string& txt) {
        int N =txt.length();
        int M = pat.length();
        vector<int> LPS(M,0), res;
        computeLPS(pat,LPS,M);
        
        int i=0;
        int j=0;
        while(i<N){
            if(txt[i]==pat[j]){
                i++;
                j++;
            }
            if(j==M){
                res.push_back(i-M);
                j=LPS[j-1];
            }else if(txt[i]!=pat[j]){
                if(j!=0){
                    j=LPS[j-1];
                }
                else i++;
                
            }
        }
        return res;
        
        
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string S, pat;
        cin >> S >> pat;
        Solution ob;
        vector<int> res = ob.search(pat, S);
        if (res.size() == 0)
            cout << "[]" << endl;
        else {
            for (int i : res)
                cout << i << " ";
            cout << endl;
        }
    }
    return 0;
}

// } Driver Code Ends
