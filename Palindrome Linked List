Difficulty: MediumAccuracy: 41.48%Submissions: 334K+Points: 4
Given a singly linked list of integers. The task is to check if the given linked list is palindrome or not.

Examples:
Input: LinkedList: 1->2->1->1->2->1
Output: true
Explanation: The given linked list is 1->2->1->1->2->1 , which is a palindrome and Hence, the output is true.

Input: LinkedList: 1->2->3->4
Output: false
Explanation: The given linked list is 1->2->3->4, which is not a palindrome and Hence, the output is false.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1) 
Note: You should not use the recursive stack space as well

Constraints:
1 <= number of nodes <= 105
1 ≤ node->data ≤ 103

Solution:
class Solution {
public:
    // Function to reverse a linked list
    Node* reverseList(Node* head) {
        Node* prev = nullptr;
        Node* curr = head;
        while (curr) {
            Node* next = curr->next; // Store the next node
            curr->next = prev;       // Reverse the link
            prev = curr;             // Move prev and curr one step forward
            curr = next;
        }
        return prev; // New head of the reversed list
    }

    // Function to check whether the list is palindrome.
    bool isPalindrome(Node *head) {
        if (!head || !head->next) return true; // Edge case: list with 0 or 1 node

        // Step 1: Find the middle of the linked list
        Node* slow = head;
        Node* fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Step 2: Reverse the second half of the linked list
        Node* secondHalf = reverseList(slow);
        Node* firstHalf = head;

        // Step 3: Compare the first and second halves
        bool isPalin = true;
        while (secondHalf) {
            if (firstHalf->data != secondHalf->data) {
                isPalin = false; // Mismatch found
                break;
            }
            firstHalf = firstHalf->next;
            secondHalf = secondHalf->next;
        }

        // Optional: Restore the original list (by reversing the second half again)
        reverseList(secondHalf);

        return isPalin;
    }
};
