Difficulty: MediumAccuracy: 64.95%Submissions: 86K+Points: 4
Given two BSTs, return elements of merged BSTs in sorted form.

Examples :

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.
Input:
BST1:
       12
     /   
    9
   / \    
  6   11
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: After merging and sorting the two BST we get 2 5 6 8 9 10 11 12.
Expected Time Complexity: O((m+n)*log(m+n))
Expected Auxiliary Space: O(Height of BST1 + Height of BST2 + m + n)

Solution:
class Solution {
  public:
    // Helper function to perform inorder traversal and store the result in a list.
    void inorder(Node* root, vector<int>& result) {
        if (root == nullptr) return;
        
        // Traverse left subtree
        inorder(root->left, result);
        
        // Store the current node's value
        result.push_back(root->data);
        
        // Traverse right subtree
        inorder(root->right, result);
    }
    
    // Function to merge two sorted arrays.
    vector<int> mergeSortedArrays(const vector<int>& arr1, const vector<int>& arr2) {
        vector<int> merged;
        int i = 0, j = 0;
        
        // Merge the two sorted arrays.
        while (i < arr1.size() && j < arr2.size()) {
            if (arr1[i] <= arr2[j]) {
                merged.push_back(arr1[i]);
                i++;
            } else {
                merged.push_back(arr2[j]);
                j++;
            }
        }
        
        // If there are remaining elements in arr1.
        while (i < arr1.size()) {
            merged.push_back(arr1[i]);
            i++;
        }
        
        // If there are remaining elements in arr2.
        while (j < arr2.size()) {
            merged.push_back(arr2[j]);
            j++;
        }
        
        return merged;
    }

    // Function to return a list of integers denoting the node
    // values of both the BST in a sorted order.
    vector<int> merge(Node *root1, Node *root2) {
        vector<int> bst1Elements, bst2Elements;
        
        // Perform inorder traversal on both BSTs.
        inorder(root1, bst1Elements);
        inorder(root2, bst2Elements);
        
        // Merge the two sorted arrays.
        return mergeSortedArrays(bst1Elements, bst2Elements);
    }
};
