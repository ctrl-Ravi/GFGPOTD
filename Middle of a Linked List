Given the head of a linked list, the task is to find the middle. For example, the middle of 1-> 2->3->4->5 is 3. If there are two middle nodes (even count), return the second middle. For example, middle of 1->2->3->4->5->6 is 4.

Solution:
class Solution {
  public:
    /* Should return data of middle node. If linked list is empty, then -1 */
    int getMiddle(Node* head) {
        if(head == NULL){
            return -1;
        }
        
        int count =0;
        Node* temp = head;
        
        while(temp!=NULL){
            count++;
            temp=temp->next;
            
        }
        
        int position = (count/2)+1;
        
        // finding node
        
        temp = head;
        
        for(int i =1; i<position;i++){
            temp=temp->next;
        }
        return temp->data;
    }
};
